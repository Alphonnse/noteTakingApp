// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: clientTerm.proto

package clientTerm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientTermClient is the client API for ClientTerm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientTermClient interface {
	CreateNote(ctx context.Context, in *AddNoteRequest, opts ...grpc.CallOption) (*NoteIDReplay, error)
	GetNotesUsername(ctx context.Context, in *GetNotesByUsername, opts ...grpc.CallOption) (*RequestedNotes, error)
	GetNoteID(ctx context.Context, in *GetNoteByID, opts ...grpc.CallOption) (*RequestedNote, error)
}

type clientTermClient struct {
	cc grpc.ClientConnInterface
}

func NewClientTermClient(cc grpc.ClientConnInterface) ClientTermClient {
	return &clientTermClient{cc}
}

func (c *clientTermClient) CreateNote(ctx context.Context, in *AddNoteRequest, opts ...grpc.CallOption) (*NoteIDReplay, error) {
	out := new(NoteIDReplay)
	err := c.cc.Invoke(ctx, "/clientTerm.clientTerm/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientTermClient) GetNotesUsername(ctx context.Context, in *GetNotesByUsername, opts ...grpc.CallOption) (*RequestedNotes, error) {
	out := new(RequestedNotes)
	err := c.cc.Invoke(ctx, "/clientTerm.clientTerm/GetNotesUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientTermClient) GetNoteID(ctx context.Context, in *GetNoteByID, opts ...grpc.CallOption) (*RequestedNote, error) {
	out := new(RequestedNote)
	err := c.cc.Invoke(ctx, "/clientTerm.clientTerm/GetNoteID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientTermServer is the server API for ClientTerm service.
// All implementations must embed UnimplementedClientTermServer
// for forward compatibility
type ClientTermServer interface {
	CreateNote(context.Context, *AddNoteRequest) (*NoteIDReplay, error)
	GetNotesUsername(context.Context, *GetNotesByUsername) (*RequestedNotes, error)
	GetNoteID(context.Context, *GetNoteByID) (*RequestedNote, error)
	mustEmbedUnimplementedClientTermServer()
}

// UnimplementedClientTermServer must be embedded to have forward compatible implementations.
type UnimplementedClientTermServer struct {
}

func (UnimplementedClientTermServer) CreateNote(context.Context, *AddNoteRequest) (*NoteIDReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedClientTermServer) GetNotesUsername(context.Context, *GetNotesByUsername) (*RequestedNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesUsername not implemented")
}
func (UnimplementedClientTermServer) GetNoteID(context.Context, *GetNoteByID) (*RequestedNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteID not implemented")
}
func (UnimplementedClientTermServer) mustEmbedUnimplementedClientTermServer() {}

// UnsafeClientTermServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientTermServer will
// result in compilation errors.
type UnsafeClientTermServer interface {
	mustEmbedUnimplementedClientTermServer()
}

func RegisterClientTermServer(s grpc.ServiceRegistrar, srv ClientTermServer) {
	s.RegisterService(&ClientTerm_ServiceDesc, srv)
}

func _ClientTerm_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTermServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientTerm.clientTerm/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTermServer).CreateNote(ctx, req.(*AddNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientTerm_GetNotesUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTermServer).GetNotesUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientTerm.clientTerm/GetNotesUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTermServer).GetNotesUsername(ctx, req.(*GetNotesByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientTerm_GetNoteID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTermServer).GetNoteID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientTerm.clientTerm/GetNoteID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTermServer).GetNoteID(ctx, req.(*GetNoteByID))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientTerm_ServiceDesc is the grpc.ServiceDesc for ClientTerm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientTerm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientTerm.clientTerm",
	HandlerType: (*ClientTermServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNote",
			Handler:    _ClientTerm_CreateNote_Handler,
		},
		{
			MethodName: "GetNotesUsername",
			Handler:    _ClientTerm_GetNotesUsername_Handler,
		},
		{
			MethodName: "GetNoteID",
			Handler:    _ClientTerm_GetNoteID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientTerm.proto",
}
